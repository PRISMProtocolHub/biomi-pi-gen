name: BIOMI-OS-IMAGE-BUILDER

env:
  wifi_country: "FR"

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release'
        required: true
        default: 'bullseye'
        type: choice
        options:
          - 'bullseye'
          - 'bookworm'
      stages_list:
        description: 'Custom Stages list'
        required: false
        default: ''
        type: string
      use_qemu:
        description: 'Use QEMU compatibility for emulation'
        required: true
        default: '0'
        type: choice
        options:
          - '0'
          - '1'
      build_docker:
        description: 'Build matching Docker image'
        required: true
        default: '0'
        type: choice
        options:
          - '0'
          - '1'
      hostname:
        description: 'Hostname for the image'
        required: true
        default: 'raspberrypi'
        type: string
      public_key:
        description: 'SSH Public Key'
        required: false
        type: string
      username:
        description: 'Default username'
        required: true
        default: 'pi'
        type: string
      password:
        description: 'Default password'
        required: true
        default: 'raspberry'
        type: string
      custom_packages:
        description: 'Additional packages to install (space-separated)'
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install coreutils quilt parted qemu-user-static debootstrap zerofree zip \
          dosfstools libarchive-tools libcap2-bin grep rsync xz-utils file git curl bc \
          gpg pigz xxd arch-test bmap-tools

      - name: Create build directory
        run: mkdir -p ${GITHUB_WORKSPACE}/deploy

      - name: Create custom package list
        if: "${{ inputs.custom_packages != '' }}"
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/custom/00-packages
          echo "${{ inputs.custom_packages }}" | tr ' ' '\n' > ${GITHUB_WORKSPACE}/custom/00-packages/00-packages

      - name: Create config file
        run: |
          IMG_NAME="biomi-${{ inputs.release }}"
          
          cat > ${GITHUB_WORKSPACE}/config << EOF
          IMG_NAME="${IMG_NAME}"
          RELEASE="${{ inputs.release }}"
          DEPLOY_ZIP=1
          LOCALE_DEFAULT="fr_FR.UTF-8"
          TARGET_HOSTNAME="${{ inputs.hostname }}"
          KEYBOARD_KEYMAP="fr"
          KEYBOARD_LAYOUT="French"
          TIMEZONE_DEFAULT="Europe/Paris"
          FIRST_USER_NAME="${{ inputs.username }}"
          FIRST_USER_PASS="${{ inputs.password }}"
          ENABLE_SSH=1
          USE_QEMU="${{ inputs.use_qemu }}"
          PUBKEY_SSH_FIRST_USER="${{ inputs.public_key }}"
          EOF
          
          if [[ "${{ inputs.stages_list }}" != "" ]]; then
            cat > ${GITHUB_WORKSPACE}/config << EOF
            STAGE_LIST="${{ inputs.stages_list }}"
            EOF
          fi

      - name: Build Image
        run: |
          sudo modprobe loop
          docker pull debian:bullseye
          DOCKER_BUILDKIT=1 ./build-docker.sh
        env:
          CONTINUE: 1
          PRESERVE_CONTAINER: 0

      - name: Prepare Docker image
        if: "${{ inputs.build_docker == '1' }}"
        run: |
          ZIP_PATH=$(find deploy -name "*.zip" | head -n 1)

          # Install tools to extract image
          sudo apt-get install -y kpartx qemu-user-static unzip
          
          # Unzip
          unzip "$ZIP_PATH" -d deploy
        
          # Find uncompressed image
          IMAGE_PATH=$(find deploy -name "*.img" | head -n 1)

          # Mount image
          sudo mkdir -p /mnt/raspberrypi
          LOOP_DEVICE=$(sudo losetup --find --show "$IMAGE_PATH")
          sudo partprobe "$LOOP_DEVICE"
          sudo mount "${LOOP_DEVICE}p2" /mnt/raspberrypi

          # Create filesystem archive
          sudo tar -czvf rootfs.tar.gz -C /mnt/raspberrypi .

          # Cleanup mount
          sudo umount /mnt/raspberrypi
          sudo kpartx -d "$IMAGE_PATH"

      - name: Create docker file
        if: "${{ inputs.build_docker == '1' }}"
        run: |
          cat > Dockerfile << EOF
          FROM scratch
          
          COPY --from=multiarch/qemu-user-static:register /usr/bin/qemu-arm-static /usr/bin/

          # Copy root file system
          ADD rootfs.tar.gz /

          # Configure environment
          ENV DEBIAN_FRONTEND=noninteractive
          ENV LC_ALL=C.UTF-8
          ENV LANG=C.UTF-8

          # Default entrypoint 
          CMD ["/bin/bash"]
          EOF
          
          sudo rm rootfs.tar.gzs

      - name: Build and push docker image
        if: "${{ inputs.build_docker == '1' }}"
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/arm/v7
          push: true
          tags: |
            ghcr.io/prismprotocolhub/biomi-pi-gen:bullseye-latest
            ghcr.io/prismprotocolhub/biomi-pi-gen:bullseye-${{ github.sha }}

      - name: Create artifact name
        id: artifact
        run: |
          ARTIFACT_NAME="biomi-os-bullseye"
          if [[ "${{ inputs.install_dev_packages }}" == "1" ]]; then
            ARTIFACT_NAME="${ARTIFACT_NAME=}-dev"
          fi
          
          if [ "${{ inputs.use_qemu }}" == "1" ]; then
            ARTIFACT_NAME="${ARTIFACT_NAME=}-qemu"
          fi
          echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Upload Image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: deploy/*.zip
          retention-days: 7

      - name: Create Release
        if: github.event_name == 'workflow_dispatch'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.artifact.outputs.name }}
          name: ${{ steps.artifact.outputs.name }}
          draft: false
          prerelease: false
          files: deploy/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          sudo rm -rf work
          sudo rm -rf deploy
